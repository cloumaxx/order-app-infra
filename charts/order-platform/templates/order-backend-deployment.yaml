apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-backend
  labels:
    app: order-backend
spec:
  replicas: {{ .Values.backend.replicaCount | default 2 }}
  selector:
    matchLabels:
      app: order-backend
  template:
    metadata:
      labels:
        app: order-backend
    spec:
      # Seguridad a nivel POD (no-root real)
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
        seccompProfile:
          type: RuntimeDefault

      containers:
        - name: app
          image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
          imagePullPolicy: {{ .Values.backend.image.pullPolicy | default "IfNotPresent" }}
          ports:
            - name: http
              containerPort: 8080

          env:
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: order-backend-config
                  key: DB_HOST
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  name: order-backend-config
                  key: DB_PORT
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: order-backend-config
                  key: DB_NAME

            # URL completa armada desde el ConfigMap (simple y robusto)
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:postgresql://$(DB_HOST):$(DB_PORT)/$(DB_NAME)"

            - name: SPRING_DATASOURCE_USERNAME
              value: {{ .Values.db.auth.username | quote }}

            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.fullnameOverride | default "db-postgresql" }}
                  key: password   # Bitnami

            - name: SPRING_JPA_HIBERNATE_DDL_AUTO
              value: "validate"
            - name: SPRING_JPA_OPEN_IN_VIEW
              value: "false"
            - name: SPRING_FLYWAY_ENABLED
              value: "true"

          # Da m√°s tiempo para arrancar y conectar a DB
          startupProbe:
            httpGet:
              path: /actuator/health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 30   # ~150s de ventana de arranque

          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 6

          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
            initialDelaySeconds: 60
            periodSeconds: 15
            timeoutSeconds: 2
            failureThreshold: 6

          resources:
            requests:
              cpu: {{ .Values.backend.resources.requests.cpu | quote }}
              memory: {{ .Values.backend.resources.requests.memory | quote }}
            limits:
              cpu: {{ .Values.backend.resources.limits.cpu | quote }}
              memory: {{ .Values.backend.resources.limits.memory | quote }}

          # Seguridad a nivel CONTENEDOR
          securityContext:
            allowPrivilegeEscalation: false
